<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2015 Red Hat, Inc

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>io.fabric8.kubeflix</groupId>
        <artifactId>hello-world-example</artifactId>
        <version>1.0.12-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.fabric8.kubeflix.examples</groupId>
    <artifactId>hello-hystrix</artifactId>
    <packaging>war</packaging>
    <name>Fabric8 :: Kubeflix :: Examples :: Hello Hystrix</name>

    <properties>
        <docker.from>docker.io/fabric8/jetty-9:1.0.0</docker.from>
        <fabric8.dockerUser>fabric8/</fabric8.dockerUser>
        <docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>
        <docker.assemblyDescriptorRef>rootWar</docker.assemblyDescriptorRef>
        <docker.port.container.jolokia>8778</docker.port.container.jolokia>
        <docker.port.container.http>8080</docker.port.container.http>

        <fabric8.service.name>${project.artifactId}</fabric8.service.name>
        <fabric8.service.port>80</fabric8.service.port>
        <fabric8.service.containerPort>8080</fabric8.service.containerPort>
        <fabric8.service.type>LoadBalancer</fabric8.service.type>
        <fabric8.label.hystrix.enabled>true</fabric8.label.hystrix.enabled>
        <fabric8.label.hystrix.cluster>default</fabric8.label.hystrix.cluster>
    </properties>


    <dependencies>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.netflix.hystrix</groupId>
            <artifactId>hystrix-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.netflix.hystrix</groupId>
            <artifactId>hystrix-metrics-event-stream</artifactId>
        </dependency>
        <dependency>
            <groupId>io.reactivex</groupId>
            <artifactId>rxjava</artifactId>
        </dependency>
    </dependencies>


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven-war-plugin.version}</version>
                <extensions>true</extensions>
            </plugin>
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty-maven-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <images>
                        <image>
                            <name>${docker.image}</name>
                            <build>
                                <from>${docker.from}</from>
                                <assembly>
                                    <descriptorRef>${docker.assemblyDescriptorRef}</descriptorRef>
                                </assembly>
                                <env>
                                    <CATALINA_OPTS>-javaagent:/opt/tomcat/jolokia-agent.jar=host=0.0.0.0,port=8778</CATALINA_OPTS>
                                </env>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>fabric8-maven-plugin</artifactId>
                <version>${fabric8-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>json</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>json</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>attach</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attach</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <!--
    Default sample commands:
    mvn -Pf8-build         ... build Docker images and create OpenShift deployment configs
    mvn -Pf8-deploy        ... f8-build + push to Docker registry + applying deployment config to OpenShift
    mvn -Pf8-local-deploy ... deployment for a single node setup without pushing to a registry
    For individual goal usage please consult the fabric8 documentation
    -->
    <profiles>
      <profile>
        <id>f8-build</id>
        <build>
          <defaultGoal>clean install docker:build fabric8:json</defaultGoal>
        </build>
      </profile>
      <profile>
        <id>f8-deploy</id>
        <properties>
          <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
          <fabric8.recreate>true</fabric8.recreate>
        </properties>
        <build>
          <defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
        </build>
      </profile>
      <profile>
        <id>f8-local-deploy</id>
        <properties>
          <fabric8.recreate>true</fabric8.recreate>
        </properties>
        <build>
          <defaultGoal>clean package docker:build fabric8:json fabric8:apply</defaultGoal>
        </build>
      </profile>
    </profiles>
</project>
