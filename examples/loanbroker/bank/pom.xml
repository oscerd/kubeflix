<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2015 Red Hat, Inc

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>loanbroker-example</artifactId>
        <groupId>io.fabric8.kubeflix</groupId>
        <version>1.0.12-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.fabric8.kubeflix.examples</groupId>
    <artifactId>loanbroker-bank</artifactId>
    <name>Fabric8 :: Kubeflix :: Examples :: LoanBroker :: Bank</name>

    <properties>
        <java.version>1.8</java.version>
        <docker.from>docker.io/java:8u40</docker.from>
        <fabric8.dockerUser>fabric8/</fabric8.dockerUser>
        <docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>
        <docker.port.container.http>8080</docker.port.container.http>
        <fabric8.service.name>${project.artifactId}</fabric8.service.name>
        <fabric8.service.port>80</fabric8.service.port>
        <fabric8.service.containerPort>8080</fabric8.service.containerPort>
        <fabric8.service.type>LoadBalancer</fabric8.service.type>
        <fabric8.readinessProbe.httpGet.path>/ready</fabric8.readinessProbe.httpGet.path>
        <fabric8.readinessProbe.httpGet.port>8080</fabric8.readinessProbe.httpGet.port>
        <fabric8.readinessProbe.initialDelaySeconds>5</fabric8.readinessProbe.initialDelaySeconds>
        <fabric8.serviceAccount>fabric8</fabric8.serviceAccount>
        <fabric8.label.hystrix.enabled>true</fabric8.label.hystrix.enabled>
        <fabric8.label.hystrix.cluster>default</fabric8.label.hystrix.cluster>
        <fabric8.label.demo.name>loanbroker</fabric8.label.demo.name>
        <fabric8.iconUrl>https://raw.githubusercontent.com/fabric8io/kubeflix/master/examples/loanbroker/bank/src/main/fabric8/logo.png</fabric8.iconUrl>
        <fabric8.env.BANK_NAME>KuBank</fabric8.env.BANK_NAME>
        <fabric8.env.BASE_RATE>10</fabric8.env.BASE_RATE>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.netflix.hystrix</groupId>
            <artifactId>hystrix-core</artifactId>
        </dependency>

        <dependency>
            <groupId>com.netflix.hystrix</groupId>
            <artifactId>hystrix-javanica</artifactId>
        </dependency>

        <dependency>
            <groupId>com.netflix.hystrix</groupId>
            <artifactId>hystrix-metrics-event-stream</artifactId>
        </dependency>

        <dependency>
            <groupId>io.fabric8.kubeflix</groupId>
            <artifactId>ribbon-discovery</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-ribbon</artifactId>
            <version>${spring-cloud-netflix.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-client</artifactId>
        </dependency>

        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-generator</artifactId>
        </dependency>


        <dependency>
            <groupId>io.reactivex</groupId>
            <artifactId>rxjava</artifactId>
        </dependency>

        <dependency>
            <groupId>io.reactivex</groupId>
            <artifactId>rxnetty</artifactId>
        </dependency>

        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-buffer</artifactId>
            <version>4.0.29.Final</version>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <phase>package</phase>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.14.1</version>
                <configuration>
                    <images>
                        <image>
                            <name>${docker.image}</name>
                            <build>
                                <from>${docker.from}</from>
                                <assembly>
                                    <basedir>/app</basedir>
                                    <descriptorRef>artifact</descriptorRef>
                                </assembly>
                                <ports>
                                    <port>${fabric8.service.containerPort}</port>
                                </ports>
                                <entryPoint>
                                    <exec>
                                        <arg>java</arg>
                                        <arg>-jar</arg>
                                        <arg>/app/${project.build.finalName}.jar</arg>
                                    </exec>
                                </entryPoint>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>fabric8-maven-plugin</artifactId>
                <version>2.2.91</version>
                <executions>
                    <execution>
                        <id>json</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>json</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>attach</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attach</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <!--
    Default sample commands:
    mvn -Pf8-build         ... build Docker images and create OpenShift deployment configs
    mvn -Pf8-deploy        ... f8-build + push to Docker registry + applying deployment config to OpenShift
    mvn -Pf8-local-deploy ... deployment for a single node setup without pushing to a registry
    For individual goal usage please consult the fabric8 documentation
    -->
    <profiles>
      <profile>
        <id>f8-build</id>
        <build>
          <defaultGoal>clean install docker:build fabric8:json</defaultGoal>
        </build>
      </profile>
      <profile>
        <id>f8-deploy</id>
        <properties>
          <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
          <fabric8.recreate>true</fabric8.recreate>
        </properties>
        <build>
          <defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
        </build>
      </profile>
      <profile>
        <id>f8-local-deploy</id>
        <properties>
          <fabric8.recreate>true</fabric8.recreate>
        </properties>
        <build>
          <defaultGoal>clean package docker:build fabric8:json fabric8:apply</defaultGoal>
        </build>
      </profile>
    </profiles>

    <repositories>
        <repository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </pluginRepository>
    </pluginRepositories>

</project>
